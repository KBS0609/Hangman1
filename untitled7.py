# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1APZcAjMB_EA836h5YGr-5JachbAbmPQi
"""

!pip install pygame==2.5.2
!pip install colorama==0.4.6

import random
from colorama import init, Back, Fore, Style

# Initialize colorama
init()

def play_hangman():
    """Plays a game of Hangman with a colored background and more words."""

    print(Back.LIGHTYELLOW_EX + Fore.BLACK + Style.BRIGHT + "Welcome to Hangman!")

    words = [
        "python", "programming", "computer", "science", "data",
        "algorithm", "machine", "learning", "artificial", "intelligence",
        "neural", "network", "deep", "dataset", "model", "training",
        "testing", "validation", "prediction", "accuracy", "statistics",
        "analysis", "visualization", "pandas", "numpy", "matplotlib",
        "seaborn", "scikit-learn", "tensorflow", "pytorch", "regression",
        "classification", "clustering", "supervised", "unsupervised",
        "reinforcement", "natural", "language", "processing", "image",
        "recognition", "object", "detection", "computer", "vision",
        "robotics", "automation", "big", "cloud", "computing",
        "internet", "things", "blockchain", "cryptocurrency", "cybersecurity",
        "database", "web", "development", "mobile", "application",
        "game", "virtual", "reality", "augmented", "software",
        "engineering", "hardware", "electronics", "mathematics", "physics"
    ]  # Extended word list
    word = random.choice(words)
    word_letters = set(word)  # letters in the word
    alphabet = set(chr(x) for x in range(97, 123))  # lowercase letters
    used_letters = set()  # what the user has guessed

    lives = 6

    # getting user input
    while len(word_letters) > 0 and lives > 0:
        # letters used
        print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'You have used these letters: ', ' '.join(used_letters))

        # current word (e.g. p - t - o n)
        word_list = [letter if letter in used_letters else '-' for letter in word]
        print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'Current word: ', ' '.join(word_list))

        print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + f"Lives remaining: {lives}")  # Display lives remaining
        # Print hangman stages
        if lives == 6:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  +---+")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"=========")
        elif lives == 5:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  +---+")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  O   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"=========")
        elif lives == 4:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  +---+")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  O   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"=========")
        elif lives == 3:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  +---+")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  O   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +" /|   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"=========")
        elif lives == 2:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  +---+")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  O   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +" /|\  |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"=========")
        elif lives == 1:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  +---+")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  O   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +" /|\  |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +" /    |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"=========")
        elif lives == 0:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  +---+")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  |   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"  O   |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +" /|\  |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +" / \  |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"      |")
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK +"=========")


        user_letter = input(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'Guess a letter: ').lower()
        if user_letter in alphabet - used_letters:
            used_letters.add(user_letter)
            if user_letter in word_letters:
                word_letters.remove(user_letter)
                print(Style.RESET_ALL)  # Reset colors after a correct guess

            else:
                lives = lives - 1  # takes away a life if wrong
                print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'Letter is not in word.')

        elif user_letter in used_letters:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'You have already used that character. Please try again.')

        else:
            print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'Invalid character. Please try again.')

    # gets here when len(word_letters) == 0 OR lives == 0
    if lives == 0:
        print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'You died, sorry. The word was', word)
    else:
        print(Style.RESET_ALL + Back.LIGHTYELLOW_EX + Fore.BLACK + 'You guessed the word', word, '!!')

    print(Style.RESET_ALL)  # Reset colors at the end

play_hangman()